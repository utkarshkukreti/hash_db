{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# HashDB [![Build Status](https://travis-ci.org/utkarshkukreti/hash_db.png)](https://travis-ci.org/utkarshkukreti/hash_db)\r\n\r\nHashDB is a minimal, in-memory, ActiveRecord like database library,\r\nbacked by a Ruby Hash.\r\n\r\n## Installation\r\n\r\nGem releases are not done frequently as of now. I recommend installing through\r\nthe git repository.\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'hash_db', git: \"https://github.com/utkarshkukreti/hash_db.git\"\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ git clone https://github.com/utkarshkukreti/hash_db.git\r\n    $ cd hash_db\r\n    $ bundle install\r\n    $ rake install\r\n\r\n## Quickstart\r\n\r\n(Complete usage instructions are below.)\r\n\r\n    require 'hash_db'\r\n\r\n    class Score\r\n      include HashDB::Model\r\n      keys :name, :points\r\n    end\r\n\r\n    score = Score.new name: \"A\", points: 10\r\n    score.save #= score.id == 1\r\n    Score.create name: \"B\", points: 11 #= id == 2\r\n    Score.create name: \"C\", points: 6 #= id == 3\r\n\r\n    Score.where(name: \"B\", points: 11).count #= 1\r\n    Score.where([:points, :>, 4], [:name, :=~, /a|b/i]).count #= 2\r\n    Score.find_by(:points, :>, 8).id #= 1\r\n\r\n## Usage\r\n\r\nFirst, require HashDB.\r\n\r\n    require 'hash_db'\r\n\r\nTo make your class a HashDB model, just include `HashDB::Model` module in\r\nyour class.\r\n\r\n    class Post\r\n      include HashDB::Model\r\n    end\r\n\r\nDefining attributes is as easy as calling `keys`, with the key names you want.\r\n\r\n      keys :title, :content\r\n\r\nHashDB will automatically create getters and setters for these keys, so you can\r\nnow assign `title` and `content` to objects of the Post class.\r\n\r\n    post = Post.new\r\n    post.title = \"Introducing HashDB\"\r\n    post.content = \"...\"\r\n\r\nJust as with ActiveRecord, you can also pass a Hash with key/value pairs to .new\r\n\r\n    # Same as above\r\n    post = Post.new title: \"Introducing HashDB\", content: \"...\"\r\n\r\nTo be able to query the model, objects must be saved, using `.save`.\r\n\r\n    post.save\r\n\r\nThis saves the object into Class.all Hash, with auto generated `id` key as the\r\nkey, and object as the value.\r\n\r\n    Post.all == { 1 => post } #= true\r\n\r\nLike ActiveRecord, `.new` and `.save` can be combined into just a `.create` call\r\non the class.\r\n\r\n    Post.create title: \"Second Post\"\r\n    Post.all.count == 2 #= true\r\n\r\n## Querying\r\n\r\nHashDB currently has just 2 query methods, `.where`, which can filter objects\r\nusing key(s) = value(s), and also using custom method call, like `:<` and `:>`.\r\n\r\nLet's take [HN](http://news.ycombinator.com) as an example. :)\r\n\r\n    class Item\r\n      include HashDB::Model\r\n      keys :url, :title, :points, :comment_count\r\n    end\r\n\r\n    Item.create url: \"http://blog.heroku.com/archives/2011/7/12/matz_joins_heroku/\",\r\n                title: \"Matz (creator of Ruby) joins Heroku\",\r\n                points: 569,\r\n                comment_count: 79\r\n    Item.create url: \"http://www.rubymotion.com/\",\r\n                title: \"RubyMotion - Ruby for iOS\",\r\n                points: 466,\r\n                comment_count: 248\r\n    Item.create url: \"http://repl.it/\",\r\n                title: \"Try Python, Ruby, Lua, Scheme, QBasic, Forth...\",\r\n                points: 379,\r\n                comment_count: 80\r\n\r\nYou can query by key = value\r\n\r\n    Item.where(points: 569).count #= 1\r\n\r\nby key = value pairs\r\n\r\n    Item.where(points: 569, comment_count: 79).count #= 1\r\n\r\nby custom method call\r\n\r\n    Item.where(:points, :>, 400).count #= 2\r\n\r\nand by custom method call pairs\r\n\r\n    Item.where([:points, :>, 400], [:title, :=~, /ios/i]).count #= 1\r\n\r\n## Associations\r\n\r\nTODO: Add Documentation\r\n\r\n## License\r\n\r\nMIT License. (c) 2013 Utkarsh Kukreti.\r\n","name":"Hash DB","tagline":"HashDB is a minimal, in-memory, ActiveRecord like database library, backed by a Ruby Hash.","google":""}